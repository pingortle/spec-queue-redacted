version: "2.1"

services:
  get-server-secrets:
    image: cgswong/aws:aws
    volumes:
      - ./server:/workspace
    working_dir: /workspace
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_SECRETS_BUCKET: ${S3_SECRETS_BUCKET}
    command: s3 cp s3://$S3_SECRETS_BUCKET ./.deploy --recursive

  deploy-server:
    build:
      context: ./server
      dockerfile: meteor-command.Dockerfile
    volumes:
      - ./server:/workspace
      - npm-cache:/root/.npm
      - node-modules:/workspace/node_modules
      - meteor-package-cache:/root/.meteor/packages
      - meteor-package-metadata:/root/.meteor/package-metadata
      - meteor-local:/workspace/.meteor/local
    working_dir: /workspace/.deploy
    command: bash -c "mup setup && mup deploy"

  test-server:
    build:
      context: ./server
      dockerfile: meteor-command.Dockerfile
    volumes:
      - ./server:/workspace
      - npm-cache:/root/.npm
      - node-modules:/workspace/node_modules
      - meteor-package-cache:/root/.meteor/packages
      - meteor-package-metadata:/root/.meteor/package-metadata
      - meteor-local:/workspace/.meteor/local
    working_dir: /workspace
    environment:
      CLUSTER_WORKERS_COUNT: 0
    command: /bin/bash -c "meteor npm install && xvfb-run meteor npm test"

  build-worker:
    build:
      context: ./server
      dockerfile: meteor-command.Dockerfile
    volumes:
      - ./worker:/workspace
      - ./.pkg-cache:/root/.pkg-cache
      - npm-cache:/root/.npm
    working_dir: /workspace
    command: /bin/sh -c "npm install && pkg --out-path dist ."

  build-cli:
    build:
      context: ./server
      dockerfile: meteor-command.Dockerfile
    volumes:
      - ./cli:/workspace
      - ./.pkg-cache:/root/.pkg-cache
      - npm-cache:/root/.npm
    working_dir: /workspace
    command: /bin/sh -c "npm install && pkg --out-path dist ."

  deploy-worker:
    image: cgswong/aws:aws
    volumes:
      - ./worker:/workspace
    working_dir: /workspace
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_WORKER_BIN_BUCKET: ${S3_WORKER_BIN_BUCKET}
    command: s3 cp dist s3://$S3_WORKER_BIN_BUCKET/worker --recursive

  deploy-cli:
    image: cgswong/aws:aws
    volumes:
      - ./cli:/workspace
    working_dir: /workspace
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_WORKER_BIN_BUCKET: ${S3_WORKER_BIN_BUCKET}
    command: s3 cp dist s3://$S3_WORKER_BIN_BUCKET/cli --recursive

  deploy-infrastructure:
    image: hashicorp/terraform:0.9.4
    volumes:
      - ./infrastructure:/workspace
      - $HOME/.ssh:/root/.ssh
    working_dir: /workspace
    environment:
      TF_VAR_aws_access_key: ${AWS_ACCESS_KEY_ID}
      TF_VAR_aws_secret_key: ${AWS_SECRET_ACCESS_KEY}
      TF_VAR_aws_region: ${AWS_REGION}
      TF_VAR_min_size: ${MIN_SIZE}
      TF_VAR_max_size: ${MAX_SIZE}
      TF_VAR_desired_capacity: ${DESIRED_CAPACITY}
    entrypoint: /bin/sh
    command: -c "terraform init && terraform apply"

volumes:
  npm-cache: {}
  node-modules: {}
  meteor-local: {}
  meteor-package-cache: {}
  meteor-package-metadata: {}
